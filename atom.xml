<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://FrozenArcher.github.io</id>
    <title>FrozenArcher</title>
    <updated>2020-04-01T10:04:36.780Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://FrozenArcher.github.io"/>
    <link rel="self" href="https://FrozenArcher.github.io/atom.xml"/>
    <subtitle>FrozenArcher&apos;s Blog</subtitle>
    <logo>https://FrozenArcher.github.io/images/avatar.png</logo>
    <icon>https://FrozenArcher.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, FrozenArcher</rights>
    <entry>
        <title type="html"><![CDATA[欢迎来到OI的世界]]></title>
        <id>https://FrozenArcher.github.io/post/huan-ying-lai-dao-oi-de-shi-jie/</id>
        <link href="https://FrozenArcher.github.io/post/huan-ying-lai-dao-oi-de-shi-jie/">
        </link>
        <updated>2020-04-01T10:02:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="欢迎来到oi的世界">欢迎来到OI的世界</h1>
<h2 id="博客作者来自嘉兴一中洗脑社的某菜鸡">博客作者：来自嘉兴一中洗脑社的某菜鸡</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解P4017 最大食物链计数]]></title>
        <id>https://FrozenArcher.github.io/post/ti-jie-p4017-zui-da-shi-wu-lian-ji-shu/</id>
        <link href="https://FrozenArcher.github.io/post/ti-jie-p4017-zui-da-shi-wu-lian-ji-shu/">
        </link>
        <updated>2020-04-01T09:53:09.000Z</updated>
        <summary type="html"><![CDATA[<h1 id="p4017-最大食物链计数题解">P4017 最大食物链计数题解</h1>
<blockquote>
<ul>
<li>拓扑排序</li>
</ul>
</blockquote>
<hr>
<p><a href="https://www.luogu.com.cn/problem/P4017">题目链接：洛谷</a></p>
<pre><code class="language-c++">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;queue&gt;
#include&lt;cstring&gt;
#define mod  80112002
#define MAXN 5005
using namespace std;

int n,m,ans=0;
vector &lt;int&gt; linker[MAXN];               //邻接表
queue  &lt;int&gt; q;                          //搜索用的队列
int f[MAXN],id[MAXN],od[MAXN];           /*f: 记录每一个点的计数
                                           id:记录每一个点的入度
                                           od:记录每一个点的出度*/
int main()
{
    cin&gt;&gt;n&gt;&gt;m;
    for(int i=1;i&lt;=m;i++)
    {
        int x,y;
        cin&gt;&gt;x&gt;&gt;y;
        od[x]++;
        id[y]++;
        linker[x].push_back(y);
    }                                    //输入
    memset(f,0,sizeof(f));               //保证计数数组为0

    for(int i=1;i&lt;=n;i++)
        if(!id[i])
        {
            q.push(i);           //当入度为0，即该点表示生产者，加入队列，从这些点开始搜索
            f[i]=1;              //这些点的计数为1
        }                
    
    while(!q.empty())
    {
        int x=q.front();
        q.pop();
        for(int i=0;i&lt;linker[x].size();i++)
        {
            int y = linker[x][i];            //遍历点x指向的所有点
            f[y]  = (f[x] + f[y]) % mod;     //y点的计数=所有指向y点的点的计数之和
            id[y]--;						 /*为保证所有指向y的点的计数都已被计算，需要计算1个点入度就-1.*/
            if(!id[y]) q.push(y);            //如果y的入度为0，说明被计算完成，加入队列。
        }
    }
    for(int i=1;i&lt;=n;i++)
        if(!od[i]) ans= (ans + f[i]) % mod;  //如果i处于食物链顶端，就把它的计数加起来
    cout&lt;&lt;ans&lt;&lt;endl;
    return 0;
}
</code></pre>
]]></summary>
        <content type="html"><![CDATA[<h1 id="p4017-最大食物链计数题解">P4017 最大食物链计数题解</h1>
<blockquote>
<ul>
<li>拓扑排序</li>
</ul>
</blockquote>
<hr>
<p><a href="https://www.luogu.com.cn/problem/P4017">题目链接：洛谷</a></p>
<pre><code class="language-c++">#include&lt;iostream&gt;
#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;queue&gt;
#include&lt;cstring&gt;
#define mod  80112002
#define MAXN 5005
using namespace std;

int n,m,ans=0;
vector &lt;int&gt; linker[MAXN];               //邻接表
queue  &lt;int&gt; q;                          //搜索用的队列
int f[MAXN],id[MAXN],od[MAXN];           /*f: 记录每一个点的计数
                                           id:记录每一个点的入度
                                           od:记录每一个点的出度*/
int main()
{
    cin&gt;&gt;n&gt;&gt;m;
    for(int i=1;i&lt;=m;i++)
    {
        int x,y;
        cin&gt;&gt;x&gt;&gt;y;
        od[x]++;
        id[y]++;
        linker[x].push_back(y);
    }                                    //输入
    memset(f,0,sizeof(f));               //保证计数数组为0

    for(int i=1;i&lt;=n;i++)
        if(!id[i])
        {
            q.push(i);           //当入度为0，即该点表示生产者，加入队列，从这些点开始搜索
            f[i]=1;              //这些点的计数为1
        }                
    
    while(!q.empty())
    {
        int x=q.front();
        q.pop();
        for(int i=0;i&lt;linker[x].size();i++)
        {
            int y = linker[x][i];            //遍历点x指向的所有点
            f[y]  = (f[x] + f[y]) % mod;     //y点的计数=所有指向y点的点的计数之和
            id[y]--;						 /*为保证所有指向y的点的计数都已被计算，需要计算1个点入度就-1.*/
            if(!id[y]) q.push(y);            //如果y的入度为0，说明被计算完成，加入队列。
        }
    }
    for(int i=1;i&lt;=n;i++)
        if(!od[i]) ans= (ans + f[i]) % mod;  //如果i处于食物链顶端，就把它的计数加起来
    cout&lt;&lt;ans&lt;&lt;endl;
    return 0;
}
</code></pre>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解P1294 高手去散步]]></title>
        <id>https://FrozenArcher.github.io/post/ti-jie-p1294-gao-shou-qu-san-bu/</id>
        <link href="https://FrozenArcher.github.io/post/ti-jie-p1294-gao-shou-qu-san-bu/">
        </link>
        <updated>2020-03-07T11:58:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="题解-p1294-高手去散步">题解 P1294 高手去散步</h1>
<p><a href="https://www.luogu.com.cn/problem/P1294">题目链接</a></p>
<h2 id="解题思路">解题思路</h2>
<ol>
<li>用邻接表存图</li>
<li>依次枚举每个结点，找出这些节点的“最大答案”</li>
<li>对于每个节点，采用深度优先遍历，找出最长路径。</li>
</ol>
<hr>
<h2 id="核心代码">核心代码：</h2>
<p>依据思路，对于每个节点，我们可以写出深度优先遍历的函数，采用递归写法：</p>
<pre><code class="language-c++">//用 __ans 记录最长路径，linker[MAX_N][MAX_N] 为存图用的邻接表，vis[MAX_N]记录是否访问。
void dfs(int x, int DIS_NOW)                   //传递参数：编号为x的节点和此时的路程DIS_NOW
{
    __ans=max(__ans, DIS_NOW);                 //把__ans更新为最大值
    for(int i=1;i&lt;=n;i++)                      //遍历每个节点
    {
        if(linker[x][i] &gt; 0 &amp;&amp; vis[i] == 0)    //如果两个节点之间有边连接且未访问
        {
            vis[i]=1;                          //标记为已访问
            dfs(i, DIS_NOW + linker[x][i]);    //dfs下一个节点
            vis[i]=0;                          //解除记录
        }
    }
}
</code></pre>
<hr>
<h2 id="完整代码">完整代码：</h2>
<pre><code class="language-c++">#include &lt;iostream&gt;
#include &lt;cstring&gt;
#define  MAX_N 25
using namespace std;

/* by FrozenArcher */

int   n,m;
bool  vis[MAX_N];
int   linker[MAX_N][MAX_N];
int   ans,__ans;

int max(int x, int y)
{
    if(x&gt;y) return x;
    else return y;
}

void dfs(int x, int DIS_NOW)
{
    __ans=max(__ans, DIS_NOW);
    for(int i=1;i&lt;=n;i++)
    {
        if(linker[x][i] &gt; 0 &amp;&amp; vis[i] == 0)
        {
            vis[i]=1;
            dfs(i, DIS_NOW + linker[x][i]);
            vis[i]=0;
        }
    }
}

int main()
{
    cin&gt;&gt;n&gt;&gt;m;
    for(int i=1;i&lt;=m;i++)
    {
        int from,to,cost;
        cin&gt;&gt;from&gt;&gt;to&gt;&gt;cost;
        linker[from][to]=linker[to][from]=cost;  //由于是无向图，两个方向都要存
    }      
    for(int i=1;i&lt;=n;i++)                        //得到每个点的最大距离
    {
        vis[i]=1;
        dfs(i, 0);
        ans=max(ans,__ans);                      //记录所有点中最大距离
        __ans=0;
        memset(vis, 0, sizeof(vis));             //清空访问记录
    }
    cout&lt;&lt;ans;
    return 0;
}
</code></pre>
<p>————end————</p>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 P1996]]></title>
        <id>https://FrozenArcher.github.io/post/ti-jie-p1996/</id>
        <link href="https://FrozenArcher.github.io/post/ti-jie-p1996/">
        </link>
        <updated>2020-03-06T08:47:14.000Z</updated>
        <content type="html"><![CDATA[<h1 id="p1996-约瑟夫问题">P1996 约瑟夫问题</h1>
<p><s>又是一道一遍过的水题</s></p>
<p><a href="https://www.luogu.com.cn/problem/P1996">题目链接</a></p>
<p>本题使用STL里的队列</p>
<p><code>#include&lt;queue&gt;</code></p>
<p>食用方法：</p>
<p><code>queue &lt;int&gt; q;</code>	         建立一个内部元素类型为int的队列；</p>
<p><code>q.push(x);</code>                     在队尾插入一个元素x；</p>
<p><code>q.pop();</code>                         弹出队首元素；</p>
<p><code>q.front();</code>                     查询队首元素；</p>
<p><code>q.end();</code>                         查询队尾元素；</p>
<p><code>q.size();</code>                       返回元素个数；</p>
<p><code>q.empty();</code>                     判断队列是否为空；</p>
<hr>
<h2 id="解题思路">解题思路</h2>
<p>每个人轮流报数，就相当于把这些人排成一排，排头报数，报完数走到队尾。所以，只要判断这个队列的队首元素是不是报到m的那个人，如果是，直接把他删除；如果不是，让他排到队尾。而队列是否还有元素可以用<code>empty()</code>来判断。有了这一思路，我们可以得到核心代码：</p>
<pre><code class="language-c++">for(int cnt=1;!q.empty();cnt++)  //用cnt%m==0来判断是不是报到了m。
    {                            //一直循环进行到队列为空
        int x=q.front();         //记录队首元素
        q.pop();                 //把队首元素抛弃
        if(cnt%m==0)             //如果报到了m
        {
            cout&lt;&lt;x&lt;&lt;' ';        //输出答案，同时被取出的这个人永远的消失了
            continue;
        }
        q.push(x);               //如果不是，就把他排到队尾
    }
</code></pre>
<p>再根据题意，写出程序其他部分即可。</p>
<hr>
<h2 id="完整代码">完整代码</h2>
<pre><code class="language-c++">#include&lt;iostream&gt;
#include&lt;queue&gt;
using namespace std;

int main()
{
    int n,m;
    cin&gt;&gt;n&gt;&gt;m;
    queue &lt;int&gt; q;
    for(int i=1;i&lt;=n;i++)
    {
        q.push(i);
    }
    for(int cnt=1;!q.empty();cnt++)
    {
        int x=q.front();
        q.pop();
        if(cnt%m==0)
        {
            cout&lt;&lt;x&lt;&lt;' ';
            continue;
        }
        q.push(x);
    }
    return 0;
}

//by FrozenArcher
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[某菜鸡的第一篇题解]]></title>
        <id>https://FrozenArcher.github.io/post/mou-cai-ji-de-di-yi-pian-ti-jie/</id>
        <link href="https://FrozenArcher.github.io/post/mou-cai-ji-de-di-yi-pian-ti-jie/">
        </link>
        <updated>2020-03-06T04:49:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="ab-problem">a+b Problem</h1>
<p><s>全站最水的一道题</s></p>
<p><a href="https://www.luogu.com.cn/problem/P1001">题目链接</a></p>
<p>不多说，直接上代码：</p>
<pre><code class="language-c++">#include&lt;iostream&gt;
using namespace std;

int main()
{
    int a,b;
    cin&gt;&gt;a&gt;&gt;b;
    cout&lt;&lt;a+b;
    return 0;
}
//by FrozenArcher
</code></pre>
]]></content>
    </entry>
</feed>